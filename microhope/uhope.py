#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.3 on Sun Aug  9 15:31:31 2020
#

import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((925, 683))
        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        
        # Menu Bar
        self.Microhope_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_ANY, _("New"), "")
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Open"), "")
        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(wx.ID_ANY, _("None"), "", wx.ITEM_RADIO)
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Examples"), wxglade_tmp_menu_sub, "")
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Save"), "")
        wxglade_tmp_menu.Append(wx.ID_ANY, _("SaveAs"), "")
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Init()"), "")
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Exit"), "")
        self.Microhope_menubar.Append(wxglade_tmp_menu, _("File"))
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Undo"), "")
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Redo"), "")
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Cut"), "")
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Copy"), "")
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Paste"), "")
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Delete"), "")
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Select All"), "")
        self.Microhope_menubar.Append(wxglade_tmp_menu, _("Edit"))
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_ANY, _("StatusBar"), "", wx.ITEM_CHECK)
        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(wx.ID_ANY, _("Black on white (default)"), "", wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.Append(wx.ID_ANY, _("White on black"), "", wx.ITEM_RADIO)
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Theme"), wxglade_tmp_menu_sub, "")
        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(wx.ID_ANY, _("Default"), "", wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.Append(wx.ID_ANY, _("10"), "", wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.Append(wx.ID_ANY, _("11"), "", wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.Append(wx.ID_ANY, _("12"), "", wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.Append(wx.ID_ANY, _("13"), "", wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.Append(wx.ID_ANY, _("14"), "", wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.Append(wx.ID_ANY, _("15"), "", wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.Append(wx.ID_ANY, _("16"), "", wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.Append(wx.ID_ANY, _("17"), "", wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.Append(wx.ID_ANY, _("18"), "", wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.Append(wx.ID_ANY, _("19"), "", wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.Append(wx.ID_ANY, _("20"), "", wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.Append(wx.ID_ANY, _("Large"), "", wx.ITEM_RADIO)
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Font size"), wxglade_tmp_menu_sub, "")
        self.Microhope_menubar.Append(wxglade_tmp_menu, _("View"))
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Detect board"), "")
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Set bootloader"), "")
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Soft RST"), "")
        self.Microhope_menubar.Append(wxglade_tmp_menu, _("Device"))
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Compile"), "")
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Assemble"), "")
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Upload"), "")
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Upload via USBASP"), "")
        self.Microhope_menubar.Append(wxglade_tmp_menu, _("Build"))
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Help"), "")
        wxglade_tmp_menu.Append(wx.ID_ANY, _("About"), "")
        wxglade_tmp_menu.Append(wx.ID_ANY, _("Author"), "")
        self.Microhope_menubar.Append(wxglade_tmp_menu, _("About"))
        self.SetMenuBar(self.Microhope_menubar)
        # Menu Bar end
        
        # Tool Bar
        self.Microhope_toolbar = wx.ToolBar(self, -1)
        self.SetToolBar(self.Microhope_toolbar)
        self.Microhope_toolbar.AddTool(wx.ID_ANY, _("new"), wx.Bitmap("/usr/share/icons/gnome/24x24/actions/document-new.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.Microhope_toolbar.AddTool(wx.ID_ANY, _("open"), wx.Bitmap("/usr/share/icons/gnome/24x24/actions/document-open.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.Microhope_toolbar.AddTool(wx.ID_ANY, _("save"), wx.Bitmap("/usr/share/icons/gnome/24x24/actions/document-save.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.Microhope_toolbar.AddSeparator()
        self.Microhope_toolbar.AddTool(wx.ID_ANY, _("undo"), wx.Bitmap("/usr/share/icons/gnome/24x24/actions/undo.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.Microhope_toolbar.AddTool(wx.ID_ANY, _("redo"), wx.Bitmap("/usr/share/icons/gnome/24x24/actions/redo.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.Microhope_toolbar.AddSeparator()
        self.Microhope_toolbar.AddTool(wx.ID_ANY, _("cut"), wx.Bitmap("/usr/share/icons/gnome/24x24/actions/editcut.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.Microhope_toolbar.AddTool(wx.ID_ANY, _("copy"), wx.Bitmap("/usr/share/icons/gnome/24x24/actions/edit-copy.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.Microhope_toolbar.AddTool(wx.ID_ANY, _("paste"), wx.Bitmap("/usr/share/icons/gnome/24x24/actions/edit-paste.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.Microhope_toolbar.AddSeparator()
        self.Microhope_toolbar.AddTool(wx.ID_ANY, _("compile"), wx.Bitmap("/usr/share/icons/gnome/24x24/actions/gtk-execute.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.Microhope_toolbar.AddTool(wx.ID_ANY, _("upload"), wx.Bitmap("/usr/share/icons/gnome/24x24/actions/go-up.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.Microhope_toolbar.AddTool(wx.ID_ANY, _("detect"), wx.Bitmap("/usr/share/icons/gnome/24x24/actions/gnome-searchtool.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.Microhope_toolbar.AddSeparator()
        self.Microhope_toolbar.AddTool(wx.ID_ANY, _("help"), wx.Bitmap("/usr/share/icons/gnome/24x24/actions/help.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        # Tool Bar end
        self.Microhope_statusbar = self.CreateStatusBar(1)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(_("frame"))
        self.Microhope_toolbar.Realize()
        self.Microhope_statusbar.SetStatusWidths([-1])

        # statusbar fields
        Microhope_statusbar_fields = [_("Microhope_statusbar")]
        for i in range(len(Microhope_statusbar_fields)):
            self.Microhope_statusbar.SetStatusText(Microhope_statusbar_fields[i], i)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.Microhope = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.Microhope)
        self.Microhope.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = MyApp(0)
    app.MainLoop()
