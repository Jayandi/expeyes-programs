// -*- C++ -*-
//
// generated by wxGlade 0.8.3 on Sun Aug  9 15:29:58 2020
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

#include "microhope.h"

// begin wxGlade: ::extracode
// end wxGlade



MyFrame::MyFrame(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
    // begin wxGlade: MyFrame::MyFrame
    SetSize(wxSize(925, 683));
    panel_1 = new wxPanel(this, wxID_ANY);
    Microhope_menubar = new wxMenuBar();
    wxMenu *wxglade_tmp_menu;
    wxglade_tmp_menu = new wxMenu();
    wxglade_tmp_menu->Append(wxID_ANY, _("New"), wxEmptyString);
    wxglade_tmp_menu->AppendSeparator();
    wxglade_tmp_menu->Append(wxID_ANY, _("Open"), wxEmptyString);
    wxMenu* wxglade_tmp_menu_sub = new wxMenu();
    wxglade_tmp_menu_sub->Append(wxID_ANY, _("None"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu->Append(wxID_ANY, _("Examples"), wxglade_tmp_menu_sub, wxEmptyString);
    wxglade_tmp_menu->Append(wxID_ANY, _("Save"), wxEmptyString);
    wxglade_tmp_menu->Append(wxID_ANY, _("SaveAs"), wxEmptyString);
    wxglade_tmp_menu->AppendSeparator();
    wxglade_tmp_menu->Append(wxID_ANY, _("Init()"), wxEmptyString);
    wxglade_tmp_menu->Append(wxID_ANY, _("Exit"), wxEmptyString);
    Microhope_menubar->Append(wxglade_tmp_menu, _("File"));
    wxglade_tmp_menu = new wxMenu();
    wxglade_tmp_menu->Append(wxID_ANY, _("Undo"), wxEmptyString);
    wxglade_tmp_menu->Append(wxID_ANY, _("Redo"), wxEmptyString);
    wxglade_tmp_menu->AppendSeparator();
    wxglade_tmp_menu->Append(wxID_ANY, _("Cut"), wxEmptyString);
    wxglade_tmp_menu->Append(wxID_ANY, _("Copy"), wxEmptyString);
    wxglade_tmp_menu->Append(wxID_ANY, _("Paste"), wxEmptyString);
    wxglade_tmp_menu->Append(wxID_ANY, _("Delete"), wxEmptyString);
    wxglade_tmp_menu->AppendSeparator();
    wxglade_tmp_menu->Append(wxID_ANY, _("Select All"), wxEmptyString);
    Microhope_menubar->Append(wxglade_tmp_menu, _("Edit"));
    wxglade_tmp_menu = new wxMenu();
    wxglade_tmp_menu->Append(wxID_ANY, _("StatusBar"), wxEmptyString, wxITEM_CHECK);
    wxMenu* wxglade_tmp_menu_sub = new wxMenu();
    wxglade_tmp_menu_sub->Append(wxID_ANY, _("Black on white (default)"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_sub->Append(wxID_ANY, _("White on black"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu->Append(wxID_ANY, _("Theme"), wxglade_tmp_menu_sub, wxEmptyString);
    wxMenu* wxglade_tmp_menu_sub = new wxMenu();
    wxglade_tmp_menu_sub->Append(wxID_ANY, _("Default"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_sub->Append(wxID_ANY, _("10"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_sub->Append(wxID_ANY, _("11"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_sub->Append(wxID_ANY, _("12"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_sub->Append(wxID_ANY, _("13"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_sub->Append(wxID_ANY, _("14"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_sub->Append(wxID_ANY, _("15"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_sub->Append(wxID_ANY, _("16"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_sub->Append(wxID_ANY, _("17"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_sub->Append(wxID_ANY, _("18"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_sub->Append(wxID_ANY, _("19"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_sub->Append(wxID_ANY, _("20"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_sub->Append(wxID_ANY, _("Large"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu->Append(wxID_ANY, _("Font size"), wxglade_tmp_menu_sub, wxEmptyString);
    Microhope_menubar->Append(wxglade_tmp_menu, _("View"));
    wxglade_tmp_menu = new wxMenu();
    wxglade_tmp_menu->Append(wxID_ANY, _("Detect board"), wxEmptyString);
    wxglade_tmp_menu->AppendSeparator();
    wxglade_tmp_menu->Append(wxID_ANY, _("Set bootloader"), wxEmptyString);
    wxglade_tmp_menu->Append(wxID_ANY, _("Soft RST"), wxEmptyString);
    Microhope_menubar->Append(wxglade_tmp_menu, _("Device"));
    wxglade_tmp_menu = new wxMenu();
    wxglade_tmp_menu->Append(wxID_ANY, _("Compile"), wxEmptyString);
    wxglade_tmp_menu->Append(wxID_ANY, _("Assemble"), wxEmptyString);
    wxglade_tmp_menu->AppendSeparator();
    wxglade_tmp_menu->Append(wxID_ANY, _("Upload"), wxEmptyString);
    wxglade_tmp_menu->Append(wxID_ANY, _("Upload via USBASP"), wxEmptyString);
    Microhope_menubar->Append(wxglade_tmp_menu, _("Build"));
    wxglade_tmp_menu = new wxMenu();
    wxglade_tmp_menu->Append(wxID_ANY, _("Help"), wxEmptyString);
    wxglade_tmp_menu->Append(wxID_ANY, _("About"), wxEmptyString);
    wxglade_tmp_menu->Append(wxID_ANY, _("Author"), wxEmptyString);
    Microhope_menubar->Append(wxglade_tmp_menu, _("About"));
    SetMenuBar(Microhope_menubar);
    Microhope_toolbar = new wxToolBar(this, -1);
    SetToolBar(Microhope_toolbar);
    Microhope_toolbar->AddTool(wxID_ANY, _("new"), wxBitmap(wxT("/usr/share/icons/gnome/24x24/actions/document-new.png"), wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    Microhope_toolbar->AddTool(wxID_ANY, _("open"), wxBitmap(wxT("/usr/share/icons/gnome/24x24/actions/document-open.png"), wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    Microhope_toolbar->AddTool(wxID_ANY, _("save"), wxBitmap(wxT("/usr/share/icons/gnome/24x24/actions/document-save.png"), wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    Microhope_toolbar->AddSeparator();
    Microhope_toolbar->AddTool(wxID_ANY, _("undo"), wxBitmap(wxT("/usr/share/icons/gnome/24x24/actions/undo.png"), wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    Microhope_toolbar->AddTool(wxID_ANY, _("redo"), wxBitmap(wxT("/usr/share/icons/gnome/24x24/actions/redo.png"), wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    Microhope_toolbar->AddSeparator();
    Microhope_toolbar->AddTool(wxID_ANY, _("cut"), wxBitmap(wxT("/usr/share/icons/gnome/24x24/actions/editcut.png"), wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    Microhope_toolbar->AddTool(wxID_ANY, _("copy"), wxBitmap(wxT("/usr/share/icons/gnome/24x24/actions/edit-copy.png"), wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    Microhope_toolbar->AddTool(wxID_ANY, _("paste"), wxBitmap(wxT("/usr/share/icons/gnome/24x24/actions/edit-paste.png"), wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    Microhope_toolbar->AddSeparator();
    Microhope_toolbar->AddTool(wxID_ANY, _("compile"), wxBitmap(wxT("/usr/share/icons/gnome/24x24/actions/gtk-execute.png"), wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    Microhope_toolbar->AddTool(wxID_ANY, _("upload"), wxBitmap(wxT("/usr/share/icons/gnome/24x24/actions/go-up.png"), wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    Microhope_toolbar->AddTool(wxID_ANY, _("detect"), wxBitmap(wxT("/usr/share/icons/gnome/24x24/actions/gnome-searchtool.png"), wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    Microhope_toolbar->AddSeparator();
    Microhope_toolbar->AddTool(wxID_ANY, _("help"), wxBitmap(wxT("/usr/share/icons/gnome/24x24/actions/help.png"), wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    Microhope_toolbar->Realize();
    Microhope_statusbar = CreateStatusBar(1);

    set_properties();
    do_layout();
    // end wxGlade
}


void MyFrame::set_properties()
{
    // begin wxGlade: MyFrame::set_properties
    SetTitle(_("frame"));
    int Microhope_statusbar_widths[] = { -1 };
    Microhope_statusbar->SetStatusWidths(1, Microhope_statusbar_widths);

    // statusbar fields
    const wxString Microhope_statusbar_fields[] = {
        _("Microhope_statusbar"),
    };
    for(int i = 0; i < Microhope_statusbar->GetFieldsCount(); ++i) {
        Microhope_statusbar->SetStatusText(Microhope_statusbar_fields[i], i);
    }
    // end wxGlade
}


void MyFrame::do_layout()
{
    // begin wxGlade: MyFrame::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
    sizer_1->Add(panel_1, 1, wxEXPAND, 0);
    SetSizer(sizer_1);
    Layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(MyFrame, wxFrame)
    // begin wxGlade: MyFrame::event_table
    // end wxGlade
END_EVENT_TABLE();


void MyFrame::---(wxCommandEvent &event)  // wxGlade: MyFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MyFrame::---) not implemented yet"));
}


// wxGlade: add MyFrame event handlers


class MyApp: public wxApp {
public:
    bool OnInit();
protected:
    wxLocale m_locale;  // locale we'll be using
};

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{
    m_locale.Init();
#ifdef APP_LOCALE_DIR
    m_locale.AddCatalogLookupPathPrefix(wxT(APP_LOCALE_DIR));
#endif
    m_locale.AddCatalog(wxT(APP_CATALOG));

    wxInitAllImageHandlers();
    MyFrame* Microhope = new MyFrame(NULL, wxID_ANY, wxEmptyString);
    SetTopWindow(Microhope);
    Microhope->Show();
    return true;
}
